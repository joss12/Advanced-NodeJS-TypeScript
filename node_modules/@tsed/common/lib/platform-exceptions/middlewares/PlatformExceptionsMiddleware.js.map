{"version":3,"file":"PlatformExceptionsMiddleware.js","sourceRoot":"","sources":["../../../src/platform-exceptions/middlewares/PlatformExceptionsMiddleware.ts"],"names":[],"mappings":";;;;AAAA,qCAAuC;AACvC,iCAAgC;AAChC,sEAAiE;AACjE,6DAAsD;AAEtD,+DAA0D;AAC1D,+EAAoE;AACpE,iFAA4E;AAE5E;;;;GAIG;AAEH,IAAa,4BAA4B,GAAzC,MAAa,4BAA4B;IAAzC;QAIE,UAAK,GAAG,2CAAiB,EAAE,CAAC;IAa9B,CAAC;IAXC,GAAG,CAAQ,KAAU,EAAa,GAAY;QAC5C,MAAM,MAAM,GAAG,kBAAW,CAAC,KAAK,CAAC;aAC9B,OAAO,EAAE;aACT,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QAE5C,IAAI,MAAM,EAAE;YACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;SAClD;QAED,MAAM,KAAK,CAAC;IACd,CAAC;CACF,CAAA;AAfC;IADC,WAAM,EAAE;sCACG,2DAA4B;gEAAC;AAIzC;IAAK,mBAAA,WAAG,EAAE,CAAA,EAAc,mBAAA,iBAAO,EAAE,CAAA;;;;uDAUhC;AAhBU,4BAA4B;IADxC,uBAAU,EAAE;GACA,4BAA4B,CAiBxC;AAjBY,oEAA4B","sourcesContent":["import {ancestorsOf} from \"@tsed/core\";\nimport {Inject} from \"@tsed/di\";\nimport {Middleware} from \"../../mvc/decorators/class/middleware\";\nimport {Err} from \"../../mvc/decorators/params/error\";\nimport {IMiddleware} from \"../../mvc/interfaces/IMiddleware\";\nimport {Context} from \"../../platform/decorators/context\";\nimport {getExceptionTypes} from \"../domain/ExceptionTypesContainer\";\nimport {GlobalErrorHandlerMiddleware} from \"./GlobalErrorHandlerMiddleware\";\n\n/**\n * Catch all errors and return the json error with the right status code when it's possible.\n * @middleware\n * @platform\n */\n@Middleware()\nexport class PlatformExceptionsMiddleware implements IMiddleware {\n  @Inject()\n  middleware: GlobalErrorHandlerMiddleware;\n\n  types = getExceptionTypes();\n\n  use(@Err() error: any, @Context() ctx: Context): any {\n    const target = ancestorsOf(error)\n      .reverse()\n      .find((target) => this.types.has(target));\n\n    if (target) {\n      return this.types.get(target)!.catch(error, ctx);\n    }\n\n    throw error;\n  }\n}\n"]}