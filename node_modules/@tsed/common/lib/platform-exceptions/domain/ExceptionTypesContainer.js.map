{"version":3,"file":"ExceptionTypesContainer.js","sourceRoot":"","sources":["../../../src/platform-exceptions/domain/ExceptionTypesContainer.ts"],"names":[],"mappings":";;;AAGA,yCAAyC;AACzC,MAAM,uBAAuB,GAAqG,IAAI,GAAG,EAAE,CAAC;AAE5I,SAAgB,qBAAqB,CAAC,IAAe,EAAE,KAAmC;IACxF,uBAAuB,CAAC,GAAG,CAAC,IAAI,EAAE,EAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,KAAK,EAAE,EAAC,CAAC,CAAC;AACpE,CAAC;AAFD,sDAEC;AAED,SAAgB,iBAAiB;IAC/B,OAAO,IAAI,GAAG,CACZ,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAC,QAAQ,EAAC,CAAC,EAAE,EAAE;QACtE,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACzB,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAND,8CAMC","sourcesContent":["import {Type} from \"@tsed/core\";\nimport type {ExceptionFilterMethods} from \"../interfaces/ExceptionFilterMethods\";\n\n// tslint:disable-next-line:variable-name\nconst ExceptionTypesContainer: Map<Type<any> | Symbol, {token: Type<ExceptionFilterMethods>; instance: ExceptionFilterMethods}> = new Map();\n\nexport function registerExceptionType(type: Type<any>, token: Type<ExceptionFilterMethods>) {\n  ExceptionTypesContainer.set(type, {token, instance: new token()});\n}\n\nexport function getExceptionTypes(): Map<Type<any> | Symbol, ExceptionFilterMethods> {\n  return new Map(\n    Array.from(ExceptionTypesContainer.entries()).map(([key, {instance}]) => {\n      return [key, instance];\n    })\n  );\n}\n"]}