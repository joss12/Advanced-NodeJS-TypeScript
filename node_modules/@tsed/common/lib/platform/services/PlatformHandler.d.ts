import { InjectorService } from "@tsed/di";
import { EndpointMetadata, HandlerMetadata, ParamMetadata } from "../../mvc";
import { HandlerContext } from "../domain/HandlerContext";
/**
 * Platform Handler abstraction layer. Wrap original class method to a pure platform handler (Express, Koa, etc...).
 * @platform
 */
export declare class PlatformHandler {
    protected injector: InjectorService;
    constructor(injector: InjectorService);
    createHandlerMetadata(obj: any | EndpointMetadata): HandlerMetadata;
    /**
     * Create a native middleware based on the given metadata and return an instance of HandlerContext
     * @param metadata
     */
    createHandler(metadata: HandlerMetadata | any): any;
    /**
     * Get param from the context
     * @param param
     * @param context
     */
    getParam(param: ParamMetadata, context: HandlerContext): any;
    /**
     * Return a custom filter
     * @param param
     * @param context
     * @deprecated
     */
    getFilter(param: ParamMetadata, context: HandlerContext): any;
    mapHandlerContext(metadata: HandlerMetadata, { request, response, err, next }: any): HandlerContext;
    createRawHandler(metadata: HandlerMetadata): Function;
    protected onRequest(context: HandlerContext): Promise<void>;
    private sortPipes;
    /**
     *
     * @param metadata
     * @param context
     */
    private mapParam;
}
