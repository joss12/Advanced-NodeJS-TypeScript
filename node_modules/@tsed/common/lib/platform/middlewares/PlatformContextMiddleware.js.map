{"version":3,"file":"PlatformContextMiddleware.js","sourceRoot":"","sources":["../../../src/platform/middlewares/PlatformContextMiddleware.ts"],"names":[],"mappings":";;;AAEA,+DAA0D;AAC1D,iEAA4D;AAC5D,mEAA8D;AAE9D,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAClC,MAAM,mBAAmB,GAAG,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAE9D;;;;;GAKG;AACH,MAAa,yBAAyB;IAMpC,YAAoB,QAAyB;QAAzB,aAAQ,GAAR,QAAQ,CAAiB;QAC3C,MAAM,EAAC,KAAK,EAAE,YAAY,EAAE,iBAAiB,GAAG,EAAE,EAAE,YAAY,GAAG,mBAAmB,EAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,CAAC;QAEzH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,YAAa,CAAC;QAClC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAQ,EAAE,QAAuB;QACpD,MAAM,EAAC,GAAG,EAAE,OAAO,EAAC,GAAG,QAAQ,CAAC;QAEhC,MAAM,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC1D,MAAM,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAC7B,aAAa;QACb,OAAO,OAAO,CAAC,GAAG,CAAC;QACnB,aAAa;QACb,OAAO,OAAO,CAAC,GAAG,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,GAAQ,EAAE,GAAQ,EAAE,IAAS;QACrC,MAAM,EAAC,KAAK,EAAE,iBAAiB,EAAE,YAAY,EAAC,GAAG,IAAI,CAAC;QAEtD,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/B,MAAM,OAAO,GAAG,iCAAe,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC3D,MAAM,QAAQ,GAAG,mCAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAE7D,GAAG,CAAC,IAAI,GAAG,IAAI,iCAAe,CAAC;YAC7B,EAAE;YACF,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;YAC5B,GAAG,EAAE,OAAO,CAAC,GAAG;YAChB,iBAAiB;YACjB,KAAK;YACL,YAAY;YACZ,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ;YACR,OAAO;SACR,CAAC,CAAC;QAEH,aAAa;QACb,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;QACnB,aAAa;QACb,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAE1B,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;QAE3D,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAEjD,IAAI,EAAE,CAAC;IACT,CAAC;CACF;AAxDD,8DAwDC","sourcesContent":["import {InjectorService} from \"@tsed/di\";\nimport {Req} from \"../../mvc/decorators/params/request\";\nimport {PlatformContext} from \"../domain/PlatformContext\";\nimport {PlatformRequest} from \"../services/PlatformRequest\";\nimport {PlatformResponse} from \"../services/PlatformResponse\";\n\nconst uuidv4 = require(\"uuid/v4\");\nconst defaultReqIdBuilder = () => uuidv4().replace(/-/gi, \"\");\n\n/**\n * Create a context with all required object to call next handlers.\n *\n * @platform\n * @middleware\n */\nexport class PlatformContextMiddleware {\n  level: \"debug\" | \"info\" | \"warn\" | \"error\" | \"off\" | undefined;\n  maxStackSize: number;\n  ignoreUrlPatterns: string[];\n  reqIdBuilder: any;\n\n  constructor(private injector: InjectorService) {\n    const {level, maxStackSize, ignoreUrlPatterns = [], reqIdBuilder = defaultReqIdBuilder} = injector.settings.logger || {};\n\n    this.level = level;\n    this.maxStackSize = maxStackSize!;\n    this.ignoreUrlPatterns = ignoreUrlPatterns;\n    this.reqIdBuilder = reqIdBuilder;\n  }\n\n  static async onClose(err: any, response: TsED.Response) {\n    const {req: request} = response;\n\n    await request.$ctx.emit(\"$onResponse\", request, response);\n    await request.$ctx.destroy();\n    // @ts-ignore\n    delete request.ctx;\n    // @ts-ignore\n    delete request.log;\n  }\n\n  async use(req: Req, res: any, next: any) {\n    const {level, ignoreUrlPatterns, maxStackSize} = this;\n\n    const id = this.reqIdBuilder();\n    const request = PlatformRequest.create(this.injector, req);\n    const response = PlatformResponse.create(this.injector, res);\n\n    req.$ctx = new PlatformContext({\n      id,\n      logger: this.injector.logger,\n      url: request.url,\n      ignoreUrlPatterns,\n      level,\n      maxStackSize,\n      injector: this.injector,\n      response,\n      request\n    });\n\n    // deprecated\n    req.ctx = req.$ctx;\n    // @ts-ignore\n    req.log = req.$ctx.logger;\n\n    req.$ctx.response.onEnd(PlatformContextMiddleware.onClose);\n\n    await this.injector.emit(\"$onRequest\", req, res);\n\n    next();\n  }\n}\n"]}