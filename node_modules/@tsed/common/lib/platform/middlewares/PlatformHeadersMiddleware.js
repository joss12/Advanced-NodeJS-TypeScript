"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformHeadersMiddleware = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const middleware_1 = require("../../mvc/decorators/class/middleware");
const next_1 = require("../../mvc/decorators/params/next");
const context_1 = require("../decorators/context");
function toHeaders(headers) {
    return Object.entries(headers).reduce((headers, [key, item]) => {
        return {
            ...headers,
            [key]: String(item.value)
        };
    }, {});
}
/**
 * Add all headers, contentType, location, redirect and statusCode resolved for the current executed endpoint.
 *
 * @platform
 * @middleware
 * @deprecated Will be removed in v6.
 */
let PlatformHeadersMiddleware = class PlatformHeadersMiddleware {
    use(ctx, next) {
        const { response } = ctx;
        const { statusCode, response: { headers = {} }, contentType, redirect, location } = ctx.endpoint;
        if (response.statusCode === 200) {
            response.status(statusCode);
        }
        response.setHeaders(toHeaders(headers));
        if (contentType) {
            response.contentType(contentType);
        }
        if (redirect) {
            response.redirect(redirect.status || 302, redirect.url);
        }
        if (location) {
            response.location(location);
        }
        next();
    }
};
tslib_1.__decorate([
    di_1.Injectable(),
    tslib_1.__metadata("design:type", di_1.InjectorService)
], PlatformHeadersMiddleware.prototype, "injector", void 0);
tslib_1.__decorate([
    tslib_1.__param(0, context_1.Context()), tslib_1.__param(1, next_1.Next()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Function]),
    tslib_1.__metadata("design:returntype", void 0)
], PlatformHeadersMiddleware.prototype, "use", null);
PlatformHeadersMiddleware = tslib_1.__decorate([
    middleware_1.Middleware()
], PlatformHeadersMiddleware);
exports.PlatformHeadersMiddleware = PlatformHeadersMiddleware;
//# sourceMappingURL=PlatformHeadersMiddleware.js.map