"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendResponseMiddleware = void 0;
const tslib_1 = require("tslib");
const di_1 = require("@tsed/di");
const middleware_1 = require("../../mvc/decorators/class/middleware");
const request_1 = require("../../mvc/decorators/params/request");
const response_1 = require("../../mvc/decorators/params/response");
const PlatformResponseMiddleware_1 = require("./PlatformResponseMiddleware");
/**
 * See example to override SendResponseMiddleware [here](/docs/middlewares/override/send-response.md).
 *
 * @deprecated Will be removed in v6.
 */
let SendResponseMiddleware = class SendResponseMiddleware {
    use(req, res) {
        return this.middleware.use(req.$ctx);
    }
};
tslib_1.__decorate([
    di_1.Inject(),
    tslib_1.__metadata("design:type", PlatformResponseMiddleware_1.PlatformResponseMiddleware)
], SendResponseMiddleware.prototype, "middleware", void 0);
tslib_1.__decorate([
    tslib_1.__param(0, request_1.Req()), tslib_1.__param(1, response_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object]),
    tslib_1.__metadata("design:returntype", void 0)
], SendResponseMiddleware.prototype, "use", null);
SendResponseMiddleware = tslib_1.__decorate([
    middleware_1.Middleware()
], SendResponseMiddleware);
exports.SendResponseMiddleware = SendResponseMiddleware;
//# sourceMappingURL=SendResponseMiddleware.js.map