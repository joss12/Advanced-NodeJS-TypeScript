"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformResponseMiddleware = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
const di_1 = require("@tsed/di");
const ConverterService_1 = require("../../converters/services/ConverterService");
const middleware_1 = require("../../mvc/decorators/class/middleware");
const abort_1 = require("../constants/abort");
const context_1 = require("../decorators/context");
const ResponseViewMiddleware_1 = require("./ResponseViewMiddleware");
/**
 * Transform data to a response
 *
 * @platform
 * @middleware
 * @deprecated Will be removed in v6.
 */
let PlatformResponseMiddleware = class PlatformResponseMiddleware {
    async use(ctx) {
        const { response, endpoint } = ctx;
        let { data } = ctx;
        if (endpoint.view) {
            // TODO change this in V6.
            data = await this.renderMiddleware.use(data, endpoint, response.raw);
        }
        else if (this.shouldSerialize(data)) {
            data = this.mapper.serialize(data, { type: endpoint.response.type, withIgnoredProps: false });
        }
        response.body(data);
        return abort_1.ABORT;
    }
    shouldSerialize(data) {
        return !(this.shouldBeStreamed(data) || this.shouldBeSent(data) || data === undefined);
    }
    shouldBeSent(data) {
        return Buffer.isBuffer(data) || core_1.isBoolean(data) || core_1.isNumber(data) || core_1.isString(data) || data === null;
    }
    shouldBeStreamed(data) {
        return core_1.isStream(data);
    }
};
tslib_1.__decorate([
    di_1.Inject(),
    tslib_1.__metadata("design:type", ConverterService_1.ConverterService)
], PlatformResponseMiddleware.prototype, "mapper", void 0);
tslib_1.__decorate([
    di_1.Inject(),
    tslib_1.__metadata("design:type", ResponseViewMiddleware_1.ResponseViewMiddleware)
], PlatformResponseMiddleware.prototype, "renderMiddleware", void 0);
tslib_1.__decorate([
    tslib_1.__param(0, context_1.Context()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", Promise)
], PlatformResponseMiddleware.prototype, "use", null);
PlatformResponseMiddleware = tslib_1.__decorate([
    middleware_1.Middleware()
], PlatformResponseMiddleware);
exports.PlatformResponseMiddleware = PlatformResponseMiddleware;
//# sourceMappingURL=PlatformResponseMiddleware.js.map