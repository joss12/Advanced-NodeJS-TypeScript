{"version":3,"file":"PlatformHeadersMiddleware.js","sourceRoot":"","sources":["../../../src/platform/middlewares/PlatformHeadersMiddleware.ts"],"names":[],"mappings":";;;;AAAA,iCAAqD;AACrD,sEAAiE;AACjE,2DAAsD;AAEtD,mDAA8C;AAE9C,SAAS,SAAS,CAAC,OAA6B;IAC9C,OAAO,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;QAC7D,OAAO;YACL,GAAG,OAAO;YACV,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;SAC1B,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAED;;;;;;GAMG;AAEH,IAAa,yBAAyB,GAAtC,MAAa,yBAAyB;IAIpC,GAAG,CAAY,GAAY,EAAU,IAAU;QAC7C,MAAM,EAAC,QAAQ,EAAC,GAAG,GAAG,CAAC;QACvB,MAAM,EACJ,UAAU,EACV,QAAQ,EAAE,EAAC,OAAO,GAAG,EAAE,EAAC,EACxB,WAAW,EACX,QAAQ,EACR,QAAQ,EACT,GAAG,GAAG,CAAC,QAAQ,CAAC;QAEjB,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE;YAC/B,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SAC7B;QAED,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAExC,IAAI,WAAW,EAAE;YACf,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;SACnC;QAED,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,IAAI,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;SACzD;QAED,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SAC7B;QAED,IAAI,EAAE,CAAC;IACT,CAAC;CACF,CAAA;AAhCC;IADC,eAAU,EAAE;sCACH,oBAAe;2DAAC;AAE1B;IAAK,mBAAA,iBAAO,EAAE,CAAA,EAAgB,mBAAA,WAAI,EAAE,CAAA;;;;oDA6BnC;AAjCU,yBAAyB;IADrC,uBAAU,EAAE;GACA,yBAAyB,CAkCrC;AAlCY,8DAAyB","sourcesContent":["import {Injectable, InjectorService} from \"@tsed/di\";\nimport {Middleware} from \"../../mvc/decorators/class/middleware\";\nimport {Next} from \"../../mvc/decorators/params/next\";\nimport {IMiddleware} from \"../../mvc/interfaces/IMiddleware\";\nimport {Context} from \"../decorators/context\";\n\nfunction toHeaders(headers: {[key: string]: any}) {\n  return Object.entries(headers).reduce((headers, [key, item]) => {\n    return {\n      ...headers,\n      [key]: String(item.value)\n    };\n  }, {});\n}\n\n/**\n * Add all headers, contentType, location, redirect and statusCode resolved for the current executed endpoint.\n *\n * @platform\n * @middleware\n * @deprecated Will be removed in v6.\n */\n@Middleware()\nexport class PlatformHeadersMiddleware implements IMiddleware {\n  @Injectable()\n  injector: InjectorService;\n\n  use(@Context() ctx: Context, @Next() next: Next) {\n    const {response} = ctx;\n    const {\n      statusCode,\n      response: {headers = {}},\n      contentType,\n      redirect,\n      location\n    } = ctx.endpoint;\n\n    if (response.statusCode === 200) {\n      response.status(statusCode);\n    }\n\n    response.setHeaders(toHeaders(headers));\n\n    if (contentType) {\n      response.contentType(contentType);\n    }\n\n    if (redirect) {\n      response.redirect(redirect.status || 302, redirect.url);\n    }\n\n    if (location) {\n      response.location(location);\n    }\n\n    next();\n  }\n}\n"]}