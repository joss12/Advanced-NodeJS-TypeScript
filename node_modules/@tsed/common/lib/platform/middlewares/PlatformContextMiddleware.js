"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformContextMiddleware = void 0;
const PlatformContext_1 = require("../domain/PlatformContext");
const PlatformRequest_1 = require("../services/PlatformRequest");
const PlatformResponse_1 = require("../services/PlatformResponse");
const uuidv4 = require("uuid/v4");
const defaultReqIdBuilder = () => uuidv4().replace(/-/gi, "");
/**
 * Create a context with all required object to call next handlers.
 *
 * @platform
 * @middleware
 */
class PlatformContextMiddleware {
    constructor(injector) {
        this.injector = injector;
        const { level, maxStackSize, ignoreUrlPatterns = [], reqIdBuilder = defaultReqIdBuilder } = injector.settings.logger || {};
        this.level = level;
        this.maxStackSize = maxStackSize;
        this.ignoreUrlPatterns = ignoreUrlPatterns;
        this.reqIdBuilder = reqIdBuilder;
    }
    static async onClose(err, response) {
        const { req: request } = response;
        await request.$ctx.emit("$onResponse", request, response);
        await request.$ctx.destroy();
        // @ts-ignore
        delete request.ctx;
        // @ts-ignore
        delete request.log;
    }
    async use(req, res, next) {
        const { level, ignoreUrlPatterns, maxStackSize } = this;
        const id = this.reqIdBuilder();
        const request = PlatformRequest_1.PlatformRequest.create(this.injector, req);
        const response = PlatformResponse_1.PlatformResponse.create(this.injector, res);
        req.$ctx = new PlatformContext_1.PlatformContext({
            id,
            logger: this.injector.logger,
            url: request.url,
            ignoreUrlPatterns,
            level,
            maxStackSize,
            injector: this.injector,
            response,
            request
        });
        // deprecated
        req.ctx = req.$ctx;
        // @ts-ignore
        req.log = req.$ctx.logger;
        req.$ctx.response.onEnd(PlatformContextMiddleware.onClose);
        await this.injector.emit("$onRequest", req, res);
        next();
    }
}
exports.PlatformContextMiddleware = PlatformContextMiddleware;
//# sourceMappingURL=PlatformContextMiddleware.js.map