"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseViewMiddleware = void 0;
const tslib_1 = require("tslib");
const middleware_1 = require("../../mvc/decorators/class/middleware");
const endpointInfo_1 = require("../../mvc/decorators/params/endpointInfo");
const response_1 = require("../../mvc/decorators/params/response");
const responseData_1 = require("../../mvc/decorators/params/responseData");
const TemplateRenderingError_1 = require("../../mvc/errors/TemplateRenderingError");
/**
 * Render a view.
 *
 * @middleware
 * @deprecated Will be removed in v6.
 */
let ResponseViewMiddleware = class ResponseViewMiddleware {
    async use(data, endpoint, response) {
        // TODO Move this code inside PlatformResponse
        try {
            const { path, options } = endpoint.view;
            return await new Promise((resolve, reject) => response.render(path, { ...options, ...data }, (err, content) => {
                err ? reject(err) : resolve(content);
            }));
        }
        catch (err) {
            throw new TemplateRenderingError_1.TemplateRenderingError(endpoint.target, endpoint.propertyKey, err);
        }
    }
};
tslib_1.__decorate([
    tslib_1.__param(0, responseData_1.ResponseData()), tslib_1.__param(1, endpointInfo_1.EndpointInfo()), tslib_1.__param(2, response_1.Res()),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, Object]),
    tslib_1.__metadata("design:returntype", Promise)
], ResponseViewMiddleware.prototype, "use", null);
ResponseViewMiddleware = tslib_1.__decorate([
    middleware_1.Middleware()
], ResponseViewMiddleware);
exports.ResponseViewMiddleware = ResponseViewMiddleware;
//# sourceMappingURL=ResponseViewMiddleware.js.map