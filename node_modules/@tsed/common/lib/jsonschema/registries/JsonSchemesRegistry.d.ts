import { Registry, Type } from "@tsed/core";
import { JSONSchema6 } from "json-schema";
import { JsonSchema } from "../class/JsonSchema";
export interface GetSchemaOptions {
    definitions: {
        [p: string]: JSONSchema6;
    };
}
/**
 * Registry to store all schemes.
 *
 * ::: warning
 * This class will be removed in v6
 * :::
 *
 * @deprecated
 */
export declare class JsonSchemaRegistry extends Registry<any, Partial<JsonSchema>> {
    /**
     *
     * @param schema
     * @param type
     * @param collectionType
     */
    private static createJsonSchema;
    /**
     *
     * @param {Type<any>} target
     * @param {string} propertyKey
     * @param type
     * @param collectionType
     * @returns {JsonSchema}
     */
    property(target: Type<any>, propertyKey: string, type: any, collectionType?: any): JsonSchema;
    /**
     *
     * @param target
     * @param {string} propertyKey
     * @param value
     */
    required(target: any, propertyKey: string, value?: boolean): any;
    /**
     *
     * @param {Type<any>} target
     * @param options
     * @returns {JSONSchema6}
     */
    getSchemaDefinition(target: Type<any>, options?: Partial<GetSchemaOptions>): JSONSchema6;
    /**
     *
     * @param {Type<any>} target
     * @param options
     * @returns {JSONSchema6}
     */
    private getSchema;
    /**
     *
     * @param {JsonSchema} schema
     * @param options
     */
    private findReferences;
    private getRef;
    /**
     *
     * @param {string} ref
     * @returns {string}
     */
    private getRefName;
    /**
     *
     * @param {string} name
     * @returns {JsonSchema}
     */
    private getSchemaByName;
}
/**
 * @deprecated Will be removed in v6.
 */
export declare const JsonSchemesRegistry: JsonSchemaRegistry;
