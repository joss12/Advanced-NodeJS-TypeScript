{"version":3,"file":"JsonSchemesRegistry.js","sourceRoot":"","sources":["../../../src/jsonschema/registries/JsonSchemesRegistry.ts"],"names":[],"mappings":"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","sourcesContent":["import {ancestorsOf, deepExtends, isClass, isPrimitiveOrPrimitiveClass, Registry, Store, Type} from \"@tsed/core\";\nimport {JSONSchema6} from \"json-schema\";\nimport {JsonSchema} from \"../class/JsonSchema\";\nimport {getJsonType} from \"../utils/getJsonType\";\n\nconst JSON_SCHEMA_FIELDS = [\"additionalItems\", \"items\", \"additionalProperties\", \"properties\", \"dependencies\", \"oneOf\"];\n\nconst toObj = (o: any) => JSON.parse(JSON.stringify(o));\n\nexport interface GetSchemaOptions {\n  definitions: {[p: string]: JSONSchema6};\n}\n\n/**\n * Registry to store all schemes.\n *\n * ::: warning\n * This class will be removed in v6\n * :::\n *\n * @deprecated\n */\nexport class JsonSchemaRegistry extends Registry<any, Partial<JsonSchema>> {\n  /**\n   *\n   * @param schema\n   * @param type\n   * @param collectionType\n   */\n  private static createJsonSchema(schema: JsonSchema = new JsonSchema(), type: any, collectionType?: any): JsonSchema {\n    if (isClass(type)) {\n      schema = Object.keys(schema.toObject()).reduce((newSchema: any, key: string) => {\n        if (!(key === \"type\" || key === \"items\" || key === \"additionalProperties\")) {\n          newSchema[key] = schema[key];\n        }\n\n        return newSchema;\n      }, JsonSchema.ref(type));\n    } else {\n      schema.type = type;\n    }\n\n    if (collectionType) {\n      schema.toCollection(collectionType);\n    }\n\n    return schema!;\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   * @param {string} propertyKey\n   * @param type\n   * @param collectionType\n   * @returns {JsonSchema}\n   */\n  property(target: Type<any>, propertyKey: string, type: any, collectionType?: any): JsonSchema {\n    if (!this.has(target)) {\n      this.merge(target, {\n        type: target\n      });\n      Store.from(target).set(\"schema\", this.get(target));\n    }\n\n    const schema = this.get(target);\n    schema.properties = schema.properties || {};\n    schema.properties[propertyKey] = JsonSchemaRegistry.createJsonSchema(schema.properties[propertyKey], type, collectionType);\n\n    return schema.properties[propertyKey];\n  }\n\n  /**\n   *\n   * @param target\n   * @param {string} propertyKey\n   * @param value\n   */\n  required(target: any, propertyKey: string, value?: boolean) {\n    const schema = this.get(target) || {};\n    const required = schema.required || [];\n\n    if (value !== undefined) {\n      const index = required.indexOf(propertyKey);\n      if (value && index === -1) {\n        schema.required = [].concat(required, [propertyKey as never]);\n      }\n      if (!value && index > -1) {\n        required.splice(required.indexOf(propertyKey), 1);\n      }\n    }\n\n    return (schema.required || []).some((p: string) => p === propertyKey);\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   * @param options\n   * @returns {JSONSchema6}\n   */\n  getSchemaDefinition(target: Type<any>, options: Partial<GetSchemaOptions> = {}): JSONSchema6 {\n    if (isPrimitiveOrPrimitiveClass(target)) {\n      return {\n        type: getJsonType(target)\n      };\n    }\n\n    return this.getSchema(target, options);\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   * @param options\n   * @returns {JSONSchema6}\n   */\n  private getSchema(target: Type<any>, options: Partial<GetSchemaOptions> = {}): JSONSchema6 {\n    const {definitions = {}} = options;\n\n    const schema = ancestorsOf(target).reduce((acc: JSONSchema6, target: Type<any>) => {\n      const schema = this.has(target) ? toObj(this.get(target)) : {};\n\n      this.findReferences(schema, {...options, definitions});\n\n      deepExtends(acc, schema);\n\n      return acc;\n    }, {});\n\n    return {definitions, ...schema};\n  }\n\n  /**\n   *\n   * @param {JsonSchema} schema\n   * @param options\n   */\n  private findReferences(schema: JSONSchema6, options: GetSchemaOptions): JSONSchema6 {\n    if (schema.$ref) {\n      return this.getRef(schema, options);\n    }\n\n    JSON_SCHEMA_FIELDS.forEach((key: string) => {\n      const value: any = (schema as any)[key];\n      if (value) {\n        if (value.$ref) {\n          return this.getRef(value, options);\n        }\n\n        Object.keys(value).forEach((index: any) => {\n          this.findReferences(value[index], options);\n        });\n      }\n    });\n\n    return schema;\n  }\n\n  private getRef(schema: JSONSchema6, options: GetSchemaOptions): JSONSchema6 {\n    const name = this.getRefName(schema.$ref);\n\n    if (name && !options.definitions[name]) {\n      const [target] = this.getSchemaByName(name) || [];\n\n      if (target) {\n        options.definitions[name] = {};\n        const {definitions, ...refSchema} = this.getSchema(target, options);\n        options.definitions[name] = refSchema;\n      } else {\n        schema.type = \"object\";\n        delete schema.$ref;\n      }\n    }\n\n    return schema;\n  }\n\n  /**\n   *\n   * @param {string} ref\n   * @returns {string}\n   */\n  private getRefName(ref: string | undefined): string {\n    return (ref || \"\").replace(\"#/definitions/\", \"\");\n  }\n\n  /**\n   *\n   * @param {string} name\n   * @returns {JsonSchema}\n   */\n  private getSchemaByName(name: string) {\n    return Array.from(this.entries()).find(([, schema]) => schema.refName === name);\n  }\n}\n\n/**\n * @deprecated Will be removed in v6.\n */\n// tslint:disable-next-line: variable-name\nexport const JsonSchemesRegistry = new JsonSchemaRegistry(JsonSchema);\n"]}