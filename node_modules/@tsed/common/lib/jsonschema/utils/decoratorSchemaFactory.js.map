{"version":3,"file":"decoratorSchemaFactory.js","sourceRoot":"","sources":["../../../src/jsonschema/utils/decoratorSchemaFactory.ts"],"names":[],"mappings":";;;AAAA,qCAAiE;AACjE,wEAAmE;AAEnE,2EAAsE;AAEtE;;;;;GAKG;AACH,SAAgB,sBAAsB,CAAC,EAAiE;IACtG,OAAO,CAAC,GAAG,UAAiB,EAAO,EAAE;QACnC,IAAI,MAAkB,CAAC;QAEvB,QAAQ,uBAAgB,CAAC,UAAU,CAAC,EAAE;YACpC,KAAK,UAAU;gBACb,MAAM,GAAG,mCAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;gBACnE,MAAM;YACR,KAAK,OAAO;gBACV,MAAM,GAAG,yCAAmB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9D,MAAM;SACT;QAED,MAAM,MAAM,GAAQ,EAAE,CAAC,MAAO,EAAE,UAAiC,CAAC,CAAC;QACnE,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YAChC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;SACvB;QAED,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;AACJ,CAAC;AApBD,wDAoBC","sourcesContent":["import {DecoratorParameters, getDecoratorType} from \"@tsed/core\";\nimport {PropertyMetadata} from \"../../mvc/models/PropertyMetadata\";\nimport {JsonSchema} from \"../class/JsonSchema\";\nimport {JsonSchemesRegistry} from \"../registries/JsonSchemesRegistry\";\n\n/**\n * @ignore\n * @deprecated Will be remove in v6.\n * @param {(schema: JsonSchema, parameters: DecoratorParameters) => void} fn\n * @returns {(...parameters: any[]) => any}\n */\nexport function decoratorSchemaFactory(fn: (schema: JsonSchema, parameters: DecoratorParameters) => void) {\n  return (...parameters: any[]): any => {\n    let schema: JsonSchema;\n\n    switch (getDecoratorType(parameters)) {\n      case \"property\":\n        schema = PropertyMetadata.get(parameters[0], parameters[1]).schema;\n        break;\n      case \"class\":\n        schema = JsonSchemesRegistry.createIfNotExists(parameters[0]);\n        break;\n    }\n\n    const result: any = fn(schema!, parameters as DecoratorParameters);\n    if (typeof result === \"function\") {\n      result(...parameters);\n    }\n\n    return parameters[2];\n  };\n}\n"]}