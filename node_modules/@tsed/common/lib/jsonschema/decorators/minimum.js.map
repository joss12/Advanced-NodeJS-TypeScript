{"version":3,"file":"minimum.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/minimum.ts"],"names":[],"mappings":";;;AAAA,4EAAuE;AAEvE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmEG;AACH,SAAgB,OAAO,CAAC,OAAe,EAAE,YAAqB,KAAK;IACjE,OAAO,+CAAsB,CAAC,CAAC,MAAM,EAAE,EAAE;QACvC,IAAI,SAAS,EAAE;YACb,MAAM,CAAC,MAAM,CAAC,gBAAgB,GAAG,OAAO,CAAC;SAC1C;aAAM;YACL,MAAM,CAAC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;SACjC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AARD,0BAQC","sourcesContent":["import {decoratorSchemaFactory} from \"../utils/decoratorSchemaFactory\";\n\n/**\n * The value of `minimum` MUST be a number, representing an inclusive upper limit for a numeric instance.\n *\n * If the instance is a number, then this keyword validates only if the instance is greater than or exactly equal to `minimum`.\n *\n * ::: warning\n * This decorator will be removed in v7.\n * For v6 user, use @@Minimum@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @Minimum(10)\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"number\",\n *       \"minimum\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @Minimum(10)\n *    @CollectionOf(Number)\n *    property: number[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"number\",\n *          \"minimum\": 10\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} minimum The minimum value allowed\n * @param {boolean} exclusive\n * @decorator\n * @validation\n * @swagger\n * @schema\n */\nexport function Minimum(minimum: number, exclusive: boolean = false) {\n  return decoratorSchemaFactory((schema) => {\n    if (exclusive) {\n      schema.mapper.exclusiveMinimum = minimum;\n    } else {\n      schema.mapper.minimum = minimum;\n    }\n  });\n}\n"]}