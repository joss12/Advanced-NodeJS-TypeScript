{"version":3,"file":"const.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/const.ts"],"names":[],"mappings":";;;AACA,4EAAuE;AAEvE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2DG;AACH,SAAgB,KAAK,CAAC,UAAiC;IACrD,OAAO,+CAAsB,CAAC,CAAC,MAAM,EAAE,EAAE;QACvC,MAAM,CAAC,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC;IACnC,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,sBAIC","sourcesContent":["import {JSONSchema6Type} from \"json-schema\";\nimport {decoratorSchemaFactory} from \"../utils/decoratorSchemaFactory\";\n\n/**\n * The const keyword is used to restrict a value to a fixed value.\n *\n * ::: warning\n * This decorator will be removed in v7.\n * For v6 user, use @@Const@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With a string\n *\n * ```typescript\n * class Model {\n *    @Const(\"value1\")\n *    property: \"value1\";\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"const\": \"value1\"\n *     }\n *   }\n * }\n * ```\n *  * ### With a boolean\n *\n * ```typescript\n * class Model {\n *    @Const(true)\n *    property: boolean;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"boolean\",\n *       \"const\": true\n *     }\n *   }\n * }\n * ```\n *\n * @param {string | number | boolean } constValue\n * @decorator\n * @validation\n * @swagger\n * @schema\n */\nexport function Const(constValue: JSONSchema6Type | any) {\n  return decoratorSchemaFactory((schema) => {\n    schema.mapper.const = constValue;\n  });\n}\n"]}