{"version":3,"file":"allowTypes.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/allowTypes.ts"],"names":[],"mappings":";;;AACA,+BAA0B;AAE1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgEG;AACH,SAAgB,UAAU,CAAC,IAAyB,EAAE,GAAG,KAA4B;IACnF,OAAO,SAAG,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC;AAC7B,CAAC;AAFD,gCAEC","sourcesContent":["import {JSONSchema6TypeName} from \"json-schema\";\nimport {Any} from \"./any\";\n\n/**\n * Set the type of the array items.\n *\n * ::: warning\n * This decorator will be removed in v7.\n * For v6 user, use @@Any@@ from @tsed/schema instead of @@AllowTypes@@ from @tsed/common.\n * :::\n *\n * ## Example\n * ### With multiple types\n *\n * ```typescript\n * class Model {\n *    @AllowTypes(\"string\", \"number\", \"boolean\", \"array\")\n *    property: \"string\" | \"number\" | \"boolean\" | \"array\";\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": [\"string\", \"number\", \"boolean\", \"array\"]\n *     }\n *   }\n * }\n * ```\n *\n * ### With array of multiple types\n *\n * ```typescript\n * class Model {\n *    @AllowTypes(\"string\", \"number\", \"boolean\", \"array\")\n *    property: (\"string\" | \"number\" | \"boolean\" | \"array\")[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": [\"string\", \"number\", \"boolean\", \"array\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @returns {Function}\n * @param type\n * @param types\n * @decorator\n * @schema\n * @swagger\n * @validation\n * @deprecated Use @Any decorator from @tsed/common instead of. Will be removed in v6.\n */\nexport function AllowTypes(type: JSONSchema6TypeName, ...types: JSONSchema6TypeName[]) {\n  return Any(type, ...types);\n}\n"]}