{"version":3,"file":"propertyName.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/propertyName.ts"],"names":[],"mappings":";;;AACA,yCAAsC;AAEtC;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAgB,YAAY,CAAC,IAAY;IACvC,OAAO,qBAAU,CAAC,CAAC,gBAAkC,EAAE,EAAE;QACvD,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC;IAC/B,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,oCAIC;AAED;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,SAAgB,IAAI,CAAC,IAAY;IAC/B,OAAO,YAAY,CAAC,IAAI,CAAQ,CAAC;AACnC,CAAC;AAFD,oBAEC","sourcesContent":["import {PropertyMetadata} from \"../../mvc/models/PropertyMetadata\";\nimport {PropertyFn} from \"./property\";\n\n/**\n * Create an alias of the propertyKey that must be used by the json mapper and json schema.\n *\n * ::: warning\n * This decorator will be removed in v6 in favor of @@Name@@ from @tsed/schema.\n * For v5 user, use @@Name@@ decorator from @tsed/common or @tsed/swagger then in v6 switch to @tsed/schema.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Name('aliasProp')\n *    property: string[];\n * }\n * ```\n *\n * @param {string} name\n * @returns {Function}\n * @decorator\n * @jsonMapper\n * @schema\n * @property\n * @deprecated Use @Name decorator instead. Will be removed in v6.\n */\nexport function PropertyName(name: string) {\n  return PropertyFn((propertyMetadata: PropertyMetadata) => {\n    propertyMetadata.name = name;\n  });\n}\n\n/**\n * Create an alias of the propertyKey that must be used by the converter.\n *\n * ::: tip\n * This decorator is used by the Converters to deserialize correctly you model.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @Name(String)\n *    property: string[];\n * }\n * ```\n *\n * @param {string} name\n * @returns {Function}\n * @decorator\n * @jsonMapper\n * @schema\n * @property\n */\nexport function Name(name: string): PropertyDecorator {\n  return PropertyName(name) as any;\n}\n"]}