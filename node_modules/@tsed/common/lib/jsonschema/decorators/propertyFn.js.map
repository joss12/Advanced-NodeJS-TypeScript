{"version":3,"file":"propertyFn.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/propertyFn.ts"],"names":[],"mappings":";;;AACA,wEAAmE;AAEnE;;;;GAIG;AACH,SAAgB,UAAU,CAAC,EAAiF;IAC1G,OAAO,CAAC,GAAG,UAAiB,EAAO,EAAE;QACnC,MAAM,gBAAgB,GAAG,mCAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,MAAM,MAAM,GAAQ,EAAE,CAAC,gBAAgB,EAAE,UAAiC,CAAC,CAAC;QAC5E,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;YAChC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;SACvB;IACH,CAAC,CAAC;AACJ,CAAC;AARD,gCAQC","sourcesContent":["import {DecoratorParameters} from \"@tsed/core\";\nimport {PropertyMetadata} from \"../../mvc/models/PropertyMetadata\";\n\n/**\n * Decorator builder. Call your function with `propertyMetadata` and `DecoratorParameters` a input parameters\n * @decorator\n * @schema\n */\nexport function PropertyFn(fn: (propertyMetadata: PropertyMetadata, parameters: DecoratorParameters) => void): Function {\n  return (...parameters: any[]): any => {\n    const propertyMetadata = PropertyMetadata.get(parameters[0], parameters[1]);\n    const result: any = fn(propertyMetadata, parameters as DecoratorParameters);\n    if (typeof result === \"function\") {\n      result(...parameters);\n    }\n  };\n}\n"]}