{"version":3,"file":"maxLength.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/maxLength.ts"],"names":[],"mappings":";;;AAAA,4EAAuE;AAEvE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0EG;AACH,SAAgB,SAAS,CAAC,SAAiB;IACzC,IAAI,SAAS,GAAG,CAAC,EAAE;QACjB,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;KAC3E;IAED,OAAO,+CAAsB,CAAC,CAAC,MAAM,EAAE,EAAE;QACvC,MAAM,CAAC,MAAM,CAAC,SAAS,GAAG,SAAS,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC;AARD,8BAQC","sourcesContent":["import {decoratorSchemaFactory} from \"../utils/decoratorSchemaFactory\";\n\n/**\n * A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.\n *\n * The length of a string instance is defined as the number of its characters as defined by [RFC 7159](http://json-schema.org/latest/json-schema-validation.html#RFC7159).\n *\n * ::: warning\n * The value of maxLength MUST be a non-negative integer.\n * :::\n *\n * ::: tip\n * Omitting this keyword has the same behavior as a value of 0.\n * :::\n *\n * ::: warning\n * This decorator will be removed in v7.\n * For v6 user, use @@MaxLength@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### With primitive type\n *\n * ```typescript\n * class Model {\n *    @MaxLength(10)\n *    property: number;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"string\",\n *       \"maxLength\": 10\n *     }\n *   }\n * }\n * ```\n *\n * ### With array type\n *\n * ```typescript\n * class Model {\n *    @MaxLength(10)\n *    @CollectionOf(String)\n *    property: string[];\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"array\",\n *       \"items\": {\n *          \"type\": \"string\",\n *          \"maxLength\": 10\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} maxLength The maximum length allowed\n * @decorator\n * @validation\n * @swagger\n * @schema\n */\nexport function MaxLength(maxLength: number) {\n  if (maxLength < 0) {\n    throw new Error(\"The value of maxLength MUST be a non-negative integer.\");\n  }\n\n  return decoratorSchemaFactory((schema) => {\n    schema.mapper.maxLength = maxLength;\n  });\n}\n"]}