{"version":3,"file":"maxProperties.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/maxProperties.ts"],"names":[],"mappings":";;;AACA,4EAAuE;AAEvE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,SAAgB,aAAa,CAAC,aAAqB;IACjD,IAAI,aAAa,GAAG,CAAC,EAAE;QACrB,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;KAC/E;IAED,OAAO,+CAAsB,CAAC,CAAC,MAAkB,EAAE,EAAE;QACnD,MAAM,CAAC,aAAa,GAAG,aAAa,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC;AARD,sCAQC","sourcesContent":["import {JsonSchema} from \"../class/JsonSchema\";\nimport {decoratorSchemaFactory} from \"../utils/decoratorSchemaFactory\";\n\n/**\n * An object instance is valid against `maxProperties` if its number of properties is less than, or equal to, the value of this keyword.\n *\n * ::: warning\n * The value of this keyword MUST be a non-negative integer.\n * :::\n *\n * ::: warning\n * This decorator will be removed in v7.\n * For v6 user, use @@MaxProperties@@ from @tsed/schema instead of @tsed/common.\n * :::\n *\n * ## Example\n * ### On prop\n * ```typescript\n * class Model {\n *    @Any()\n *    @MaxProperties(10)\n *    property: any;\n * }\n * ```\n *\n * Will produce:\n *\n * ```json\n * {\n *   \"type\": \"object\",\n *   \"properties\": {\n *     \"property\": {\n *       \"type\": \"any\",\n *       \"maxProperties\": 10\n *     }\n *   }\n * }\n * ```\n *\n * @param {number} maxProperties\n * @validation\n * @swagger\n * @schema\n * @collections\n */\nexport function MaxProperties(maxProperties: number) {\n  if (maxProperties < 0) {\n    throw new Error(\"The value of maxProperties MUST be a non-negative integer.\");\n  }\n\n  return decoratorSchemaFactory((schema: JsonSchema) => {\n    schema.maxProperties = maxProperties;\n  });\n}\n"]}