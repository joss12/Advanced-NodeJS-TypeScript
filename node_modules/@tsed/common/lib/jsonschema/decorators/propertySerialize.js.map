{"version":3,"file":"propertySerialize.js","sourceRoot":"","sources":["../../../src/jsonschema/decorators/propertySerialize.ts"],"names":[],"mappings":";;;AACA,yCAAsC;AAEtC;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAgB,iBAAiB,CAAC,EAAuB;IACvD,OAAO,qBAAU,CAAC,CAAC,gBAAkC,EAAE,EAAE;QACvD,gBAAgB,CAAC,WAAW,GAAG,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;AACL,CAAC;AAJD,8CAIC;AAED;;;;;;;;;;;;;;;;;;GAkBG;AACH,SAAgB,WAAW,CAAC,EAAuB;IACjD,OAAO,iBAAiB,CAAC,EAAE,CAAC,CAAC;AAC/B,CAAC;AAFD,kCAEC","sourcesContent":["import {PropertyMetadata} from \"../../mvc/models/PropertyMetadata\";\nimport {PropertyFn} from \"./property\";\n\n/**\n * Call the function after property serialization.\n *\n * ::: warning\n * This decorator will be removed in v6 in favor of @@OnSerialize@@ from @tsed/json-mapper.\n * For v5 user, use @@OnSerialize@@ decorator from @tsed/common then in v6 switch to @tsed/schema.\n * :::\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @OnSerialize(v => v + 1)\n *    property: string;\n * }\n * ```\n *\n * @param {Function} fn\n * @returns {Function}\n * @decorator\n * @jsonMapper\n * @schema\n * @property\n * @deprecated Use OnSerialize instead. Will be removed in v6.\n */\nexport function PropertySerialize(fn: (value: any) => any) {\n  return PropertyFn((propertyMetadata: PropertyMetadata) => {\n    propertyMetadata.onSerialize = fn;\n  });\n}\n\n/**\n * Call the function after property serialization.\n *\n * ## Example\n *\n * ```typescript\n * class Model {\n *    @OnSerialize(v => v + 1)\n *    property: string;\n * }\n * ```\n *\n * @param {Function} fn\n * @returns {Function}\n * @decorator\n * @jsonMapper\n * @schema\n * @property\n */\nexport function OnSerialize(fn: (value: any) => any) {\n  return PropertySerialize(fn);\n}\n"]}