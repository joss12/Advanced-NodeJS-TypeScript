{"version":3,"file":"PropertyMetadata.js","sourceRoot":"","sources":["../../../src/mvc/models/PropertyMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import {ancestorsOf, Enumerable, Storable, Store, Type} from \"@tsed/core\";\nimport {IPropertyOptions} from \"../../converters/interfaces/IPropertyOptions\";\nimport {JsonSchema} from \"../../jsonschema/class/JsonSchema\";\nimport {JsonSchemesRegistry} from \"../../jsonschema/registries/JsonSchemesRegistry\";\n\nexport class PropertyMetadata extends Storable implements IPropertyOptions {\n  /**\n   * Allowed value when the entity is required.\n   * @type {Array}\n   */\n  @Enumerable()\n  public allowedRequiredValues: any[] = [];\n\n  @Enumerable()\n  public ignoreProperty: boolean = false;\n\n  @Enumerable()\n  public onSerialize: Function;\n\n  @Enumerable()\n  public onDeserialize: Function;\n\n  constructor(target: any, propertyKey: any) {\n    super(target, propertyKey);\n    this.createJsonSchema();\n  }\n\n  /**\n   *\n   * @returns {Type<any>}\n   */\n  get type(): Type<any> {\n    return this._type;\n  }\n\n  /**\n   *\n   * @param value\n   */\n  set type(value: Type<any>) {\n    this._type = value || Object;\n    this.createJsonSchema();\n  }\n\n  /**\n   *\n   * @returns {JsonSchema}\n   */\n  get schema(): JsonSchema {\n    return this.store.get(\"schema\");\n  }\n\n  /**\n   * Return the required state.\n   * @returns {boolean}\n   */\n  get required(): boolean {\n    return JsonSchemesRegistry.required(this.target, this.name || (this.propertyKey as string));\n  }\n\n  /**\n   * Change the state of the required data.\n   * @param value\n   */\n  set required(value: boolean) {\n    JsonSchemesRegistry.required(this.target, this.name || (this.propertyKey as string), value);\n  }\n\n  /**\n   *\n   * @param target\n   * @param propertyKey\n   * @returns {PropertyMetadata}\n   */\n  static get(target: Type<any>, propertyKey: string | symbol): PropertyMetadata {\n    const properties = this.getOwnProperties(target);\n\n    if (!properties.has(propertyKey)) {\n      this.set(target, propertyKey, new PropertyMetadata(target, propertyKey));\n    }\n\n    return properties.get(propertyKey)!;\n  }\n\n  /**\n   *\n   * @param target\n   * @param options\n   * @returns {Array}\n   */\n  static getProperties(target: Type<any>, options: Partial<{withIgnoredProps: boolean}> = {}): Map<string | symbol, PropertyMetadata> {\n    const map = new Map<string | symbol, PropertyMetadata>();\n    const ignored: string[] = [];\n\n    ancestorsOf(target).forEach((klass) => {\n      this.getOwnProperties(klass).forEach((v: PropertyMetadata, k: string) => {\n        /* istanbul ignore next */\n        if (ignored.indexOf(k) !== -1) {\n          return;\n        }\n        if (options.withIgnoredProps) {\n          map.set(k, v);\n        } else {\n          if (!v.ignoreProperty) {\n            map.set(k, v);\n          } else {\n            map.delete(k);\n            ignored.push(k);\n          }\n        }\n      });\n    });\n\n    return map;\n  }\n\n  /**\n   *\n   * @param {Type<any>} target\n   * @returns {Map<string | symbol, PropertyMetadata>}\n   */\n  static getOwnProperties(target: Type<any>): Map<string | symbol, PropertyMetadata> {\n    const store = Store.from(target);\n\n    if (!store.has(\"properties\")) {\n      store.set(\"properties\", new Map<string | symbol, PropertyMetadata>());\n    }\n\n    return store.get(\"properties\");\n  }\n\n  /**\n   *\n   * @param target\n   * @param propertyKey\n   * @param property\n   */\n  static set(target: Type<any>, propertyKey: string | symbol, property: PropertyMetadata): void {\n    const properties = this.getOwnProperties(target);\n\n    properties.set(propertyKey, property);\n  }\n\n  /**\n   * Check precondition between value, required and allowedRequiredValues to know if the entity is required.\n   * @param value\n   * @returns {boolean}\n   */\n  isRequired(value: any): boolean {\n    return this.required && [undefined, null, \"\"].includes(value) && !this.allowedRequiredValues.includes(value);\n  }\n\n  private createJsonSchema() {\n    this.store.set(\"schema\", JsonSchemesRegistry.property(this.target, this.propertyKey as string, this.type, this.collectionType));\n  }\n}\n"]}