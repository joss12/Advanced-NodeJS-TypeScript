{"version":3,"file":"ParamMetadata.js","sourceRoot":"","sources":["../../../src/mvc/models/ParamMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import {ancestorsOf, Enumerable, Storable, Store, Type} from \"@tsed/core\";\nimport {IFilter} from \"../interfaces/IFilter\";\nimport {ParamTypes} from \"./ParamTypes\";\n\nexport interface IParamConstructorOptions {\n  target?: Type<any>;\n  propertyKey?: string | symbol;\n  index: number;\n  required?: boolean;\n  expression?: string;\n  useType?: Type<any>;\n  /**\n   * @deprecated use pipe instead\n   */\n  filter?: Type<IFilter>;\n  paramType?: string | ParamTypes;\n  pipes?: Type<IPipe>[];\n}\n\nexport interface IPipe<T = any, R = any> {\n  transform(value: T, metadata: ParamMetadata): R;\n}\n\nexport class ParamMetadata extends Storable implements IParamConstructorOptions {\n  /**\n   * Allowed value when the entity is required.\n   * @type {Array}\n   */\n  public allowedRequiredValues: any[] = [];\n  /**\n   * Required entity.\n   */\n  public required: boolean = false;\n  /**\n   *\n   */\n  @Enumerable()\n  public expression: string;\n  /**\n   *\n   */\n  @Enumerable()\n  public paramType: string | ParamTypes;\n\n  @Enumerable()\n  pipes: Type<IPipe>[] = [];\n\n  @Enumerable()\n  filter?: Type<IFilter>;\n\n  constructor(options: IParamConstructorOptions) {\n    super(options.target as Type<any>, options.propertyKey!, options.index);\n\n    const {expression, paramType, filter, pipes} = options;\n\n    this.expression = expression || this.expression;\n    this.paramType = paramType || this.paramType;\n    this.filter = filter;\n    this.pipes = pipes || [];\n  }\n\n  get service(): string | Type<any> | ParamTypes {\n    return this.filter || this.paramType;\n  }\n\n  set service(service: string | Type<any> | ParamTypes) {\n    if (typeof service === \"string\") {\n      this.paramType = service;\n    } else {\n      this.filter = service;\n    }\n  }\n\n  static get(target: Type<any>, propertyKey: string | symbol, index: number): ParamMetadata {\n    const params = Store.fromMethod(target, String(propertyKey)).get(\"params\") || [];\n\n    if (!this.has(target, propertyKey, index)) {\n      params[index] = new ParamMetadata({target, propertyKey, index});\n      this.set(target, propertyKey, index, params[index]);\n    }\n\n    return params[index];\n  }\n\n  static has(target: Type<any>, propertyKey: string | symbol, index: number) {\n    const params = Store.fromMethod(target, String(propertyKey)).get(\"params\") || [];\n\n    return !!params[index];\n  }\n\n  static set(target: Type<any>, propertyKey: string | symbol, index: number, paramMetadata: ParamMetadata): void {\n    const store = Store.fromMethod(target, String(propertyKey));\n    const params = store.get<ParamMetadata[]>(\"params\") || [];\n\n    params[index] = paramMetadata;\n\n    store.set(\"params\", params);\n  }\n\n  static getParams(target: Type<any>, propertyKey: string | symbol): ParamMetadata[] {\n    const klass = ancestorsOf(target)\n      .reverse()\n      .find((target) => Store.fromMethod(target, String(propertyKey)).has(\"params\"));\n\n    if (!klass) {\n      return [];\n    }\n\n    return Store.fromMethod(klass, String(propertyKey)).get<ParamMetadata[]>(\"params\") || [];\n  }\n\n  /**\n   * Check precondition between value, required and allowedRequiredValues to know if the entity is required.\n   * @param value\n   * @returns {boolean}\n   */\n  isRequired(value: any): boolean {\n    return this.required && [undefined, null, \"\"].includes(value) && !this.allowedRequiredValues.includes(value);\n  }\n}\n"]}