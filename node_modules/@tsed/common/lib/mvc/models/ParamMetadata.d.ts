import { Storable, Type } from "@tsed/core";
import { IFilter } from "../interfaces/IFilter";
import { ParamTypes } from "./ParamTypes";
export interface IParamConstructorOptions {
    target?: Type<any>;
    propertyKey?: string | symbol;
    index: number;
    required?: boolean;
    expression?: string;
    useType?: Type<any>;
    /**
     * @deprecated use pipe instead
     */
    filter?: Type<IFilter>;
    paramType?: string | ParamTypes;
    pipes?: Type<IPipe>[];
}
export interface IPipe<T = any, R = any> {
    transform(value: T, metadata: ParamMetadata): R;
}
export declare class ParamMetadata extends Storable implements IParamConstructorOptions {
    /**
     * Allowed value when the entity is required.
     * @type {Array}
     */
    allowedRequiredValues: any[];
    /**
     * Required entity.
     */
    required: boolean;
    /**
     *
     */
    expression: string;
    /**
     *
     */
    paramType: string | ParamTypes;
    pipes: Type<IPipe>[];
    filter?: Type<IFilter>;
    constructor(options: IParamConstructorOptions);
    get service(): string | Type<any> | ParamTypes;
    set service(service: string | Type<any> | ParamTypes);
    static get(target: Type<any>, propertyKey: string | symbol, index: number): ParamMetadata;
    static has(target: Type<any>, propertyKey: string | symbol, index: number): boolean;
    static set(target: Type<any>, propertyKey: string | symbol, index: number, paramMetadata: ParamMetadata): void;
    static getParams(target: Type<any>, propertyKey: string | symbol): ParamMetadata[];
    /**
     * Check precondition between value, required and allowedRequiredValues to know if the entity is required.
     * @param value
     * @returns {boolean}
     */
    isRequired(value: any): boolean;
}
