"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParamMetadata = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@tsed/core");
class ParamMetadata extends core_1.Storable {
    constructor(options) {
        super(options.target, options.propertyKey, options.index);
        /**
         * Allowed value when the entity is required.
         * @type {Array}
         */
        this.allowedRequiredValues = [];
        /**
         * Required entity.
         */
        this.required = false;
        this.pipes = [];
        const { expression, paramType, filter, pipes } = options;
        this.expression = expression || this.expression;
        this.paramType = paramType || this.paramType;
        this.filter = filter;
        this.pipes = pipes || [];
    }
    get service() {
        return this.filter || this.paramType;
    }
    set service(service) {
        if (typeof service === "string") {
            this.paramType = service;
        }
        else {
            this.filter = service;
        }
    }
    static get(target, propertyKey, index) {
        const params = core_1.Store.fromMethod(target, String(propertyKey)).get("params") || [];
        if (!this.has(target, propertyKey, index)) {
            params[index] = new ParamMetadata({ target, propertyKey, index });
            this.set(target, propertyKey, index, params[index]);
        }
        return params[index];
    }
    static has(target, propertyKey, index) {
        const params = core_1.Store.fromMethod(target, String(propertyKey)).get("params") || [];
        return !!params[index];
    }
    static set(target, propertyKey, index, paramMetadata) {
        const store = core_1.Store.fromMethod(target, String(propertyKey));
        const params = store.get("params") || [];
        params[index] = paramMetadata;
        store.set("params", params);
    }
    static getParams(target, propertyKey) {
        const klass = core_1.ancestorsOf(target)
            .reverse()
            .find((target) => core_1.Store.fromMethod(target, String(propertyKey)).has("params"));
        if (!klass) {
            return [];
        }
        return core_1.Store.fromMethod(klass, String(propertyKey)).get("params") || [];
    }
    /**
     * Check precondition between value, required and allowedRequiredValues to know if the entity is required.
     * @param value
     * @returns {boolean}
     */
    isRequired(value) {
        return this.required && [undefined, null, ""].includes(value) && !this.allowedRequiredValues.includes(value);
    }
}
tslib_1.__decorate([
    core_1.Enumerable(),
    tslib_1.__metadata("design:type", String)
], ParamMetadata.prototype, "expression", void 0);
tslib_1.__decorate([
    core_1.Enumerable(),
    tslib_1.__metadata("design:type", String)
], ParamMetadata.prototype, "paramType", void 0);
tslib_1.__decorate([
    core_1.Enumerable(),
    tslib_1.__metadata("design:type", Array)
], ParamMetadata.prototype, "pipes", void 0);
tslib_1.__decorate([
    core_1.Enumerable(),
    tslib_1.__metadata("design:type", core_1.Type)
], ParamMetadata.prototype, "filter", void 0);
exports.ParamMetadata = ParamMetadata;
//# sourceMappingURL=ParamMetadata.js.map