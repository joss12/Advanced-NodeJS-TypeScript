{"version":3,"file":"response.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/params/response.ts"],"names":[],"mappings":";;;AAAA,wDAAmD;AACnD,yCAAoC;AAWpC,SAAgB,QAAQ;IACtB,OAAO,GAAG,EAAE,CAAC;AACf,CAAC;AAFD,4BAEC;AAYD,SAAgB,GAAG;IACjB,OAAO,mBAAQ,CAAC,uBAAU,CAAC,QAAQ,CAAC,CAAC;AACvC,CAAC;AAFD,kBAEC","sourcesContent":["import {ParamTypes} from \"../../models/ParamTypes\";\nimport {UseParam} from \"./useParam\";\n\n/**\n * Response service.\n *\n * @decorator\n * @operation\n * @input\n * @response\n */\nexport function Response(): ParameterDecorator;\nexport function Response(): ParameterDecorator {\n  return Res();\n}\n\n/**\n * Request service.\n *\n * @alias Response\n * @decorator\n * @operation\n * @input\n * @response\n */\nexport function Res(): ParameterDecorator;\nexport function Res(): ParameterDecorator {\n  return UseParam(ParamTypes.RESPONSE);\n}\n\ndeclare global {\n  namespace TsED {\n    export interface Response {\n      headersSent: boolean;\n      writableEnded: boolean;\n      writableFinished: boolean;\n      statusCode: number;\n\n      /**\n       * Set header `field` to `val`, or pass\n       * an object of header fields.\n       *\n       * Examples:\n       *\n       *    res.set('Foo', ['bar', 'baz']);\n       *    res.set('Accept', 'application/json');\n       *    res.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\n       *\n       * Aliased as `res.header()`.\n       */\n      set(key: string, value: any): any;\n\n      set(headers: {[key: string]: any}): any;\n\n      /**\n       * Set status `code`.\n       */\n      status(code: number): any;\n\n      pipe(pipe: any): any;\n\n      send(body?: any): any;\n\n      /**\n       * Send JSON response.\n       *\n       * Examples:\n       *\n       *     res.json(null);\n       *     res.json({ user: 'tj' });\n       *     res.status(500).json('oh noes!');\n       *     res.status(404).json('I dont have that');\n       */\n      json(obj: any): any;\n\n      /**\n       * Set _Content-Type_ response header with `type` through `mime.lookup()`\n       * when it does not contain \"/\", or set the Content-Type to `type` otherwise.\n       *\n       * Examples:\n       *\n       *     res.type('.html');\n       *     res.type('html');\n       *     res.type('json');\n       *     res.type('application/json');\n       *     res.type('png');\n       */\n      contentType(type: string): this;\n\n      /**\n       * Set the location header to `url`.\n       *\n       * The given `url` can also be the name of a mapped url, for\n       * example by default express supports \"back\" which redirects\n       * to the _Referrer_ or _Referer_ headers or \"/\".\n       *\n       * Examples:\n       *\n       *    res.location('/foo/bar').;\n       *    res.location('http://example.com');\n       *    res.location('../login'); // /blog/post/1 -> /blog/login\n       *\n       * Mounting:\n       *\n       *   When an application is mounted and `res.location()`\n       *   is given a path that does _not_ lead with \"/\" it becomes\n       *   relative to the mount-point. For example if the application\n       *   is mounted at \"/blog\", the following would become \"/blog/login\".\n       *\n       *      res.location('login');\n       *\n       *   While the leading slash would result in a location of \"/login\":\n       *\n       *      res.location('/login');\n       */\n      location(url: string): this;\n\n      /**\n       * Redirect to the given `url` with optional response `status`\n       * defaulting to 302.\n       *\n       * The resulting `url` is determined by `res.location()`, so\n       * it will play nicely with mounted apps, relative paths,\n       * `\"back\"` etc.\n       *\n       * Examples:\n       *\n       *    res.redirect('/foo/bar');\n       *    res.redirect('http://example.com');\n       *    res.redirect(301, 'http://example.com');\n       *    res.redirect('http://example.com', 301);\n       *    res.redirect('../login'); // /blog/post/1 -> /blog/login\n       */\n      redirect(url: string): void;\n\n      redirect(status: number, url: string): void;\n\n      redirect(url: string, status: number): void;\n    }\n  }\n}\n/**\n * Response service.\n *\n * @decorator\n * @operation\n * @input\n * @response\n */\nexport interface Response extends TsED.Response {}\n/**\n * Response service.\n *\n * @alias Response\n * @decorator\n * @operation\n * @input\n * @response\n */\nexport interface Res extends TsED.Response {}\n"]}