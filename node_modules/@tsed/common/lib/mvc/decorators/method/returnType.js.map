{"version":3,"file":"returnType.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/method/returnType.ts"],"names":[],"mappings":";;;AAAA,qCAAwD;AAExD,6CAAwC;AAExC,MAAM,eAAe,GAAG,CAAC,IAAwB,EAAE,EAAE,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,CAAC;AAExF;;GAEG;AACH,SAAS,wBAAwB,CAAC,IAAW;IAC3C,MAAM,aAAa,GAAQ,EAAE,CAAC;IAE9B,IAAI,CAAC,OAAO,CAAC,CAAC,KAAU,EAAE,EAAE;QAC1B,aAAa,CAAC,OAAO,KAAK,CAAC,GAAG,KAAK,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,MAAM,EAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,GAAG,EAAS,EAAE,QAAQ,EAAE,IAAI,EAAC,GAAG,aAAa,CAAC;IAElF,IAAI,IAAI,EAAE;QACR,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;KACrB;IAED,OAAO;QACL,GAAG,OAAO;QACV,IAAI;QACJ,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,GAAG;QACjC,cAAc,EAAE,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,UAAU;KAC7D,CAAC;AACJ,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,SAAgB,UAAU,CAAC,WAAsC,EAAE;IACjE,OAAO,uBAAU,CAAC,CAAC,QAAQ,EAAE,EAAE;QAC7B,MAAM,EAAC,SAAS,EAAE,UAAU,EAAC,GAAG,QAAQ,CAAC;QACzC,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,UAAU,CAAC,CAAC,WAAW;QAErD,IAAI,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAClC,MAAM,EAAC,QAAQ,EAAC,GAAG,QAAQ,CAAC;YAC5B,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAC7B,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC;YAC3B,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;SACxC;QAED,QAAQ,GAAG;YACT,WAAW,EAAE,EAAE;YACf,GAAG,gBAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,kBAAW,CAAC,QAAQ,CAAC,CAAC;YACjE,IAAI;SACL,CAAC;QAEF,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAK,EAAE,QAA4B,CAAC,CAAC;IACvE,CAAC,CAAC,CAAC;AACL,CAAC;AApBD,gCAoBC;AAgGD,SAAgB,OAAO,CAAC,GAAG,IAAW;IACpC,OAAO,UAAU,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC;AACpD,CAAC;AAFD,0BAEC;AAqGD,SAAgB,YAAY,CAAC,GAAG,IAAW;IACzC,OAAO,UAAU,CAAC,EAAC,GAAG,wBAAwB,CAAC,IAAI,CAAC,EAAE,cAAc,EAAE,KAAK,EAAC,CAAC,CAAC;AAChF,CAAC;AAFD,oCAEC","sourcesContent":["import {cleanObject, deepMerge, Type} from \"@tsed/core\";\nimport {IResponseOptions} from \"../../interfaces/IResponseOptions\";\nimport {EndpointFn} from \"./endpointFn\";\n\nconst isSuccessStatus = (code: number | undefined) => code && 200 <= code && code < 300;\n\n/**\n * @ignore\n */\nfunction mapStatusResponseOptions(args: any[]): any {\n  const configuration: any = {};\n\n  args.forEach((value: any) => {\n    configuration[typeof value] = value;\n  });\n\n  const {number: code, object: options = {} as any, function: type} = configuration;\n\n  if (type) {\n    options.type = type;\n  }\n\n  return {\n    ...options,\n    code,\n    type: options.type || options.use,\n    collectionType: options.collectionType || options.collection\n  };\n}\n\n/**\n * Define the returned type for the serialization.\n *\n * ::: warning\n * This decorator will be removed in v6 in favor of @@Returns@@ from @tsed/schema.\n * For v5 user, use @@Returns@@ decorator from @tsed/common then in v6 switch to @tsed/schema.\n * :::\n *\n * ```typescript\n * @Controller('/')\n * export class Ctrl {\n *    @Get('/')\n *    @ReturnType({code: 200, type: User, collectionType: Map})\n *    get(): Promise<Map<User>> { }\n * }\n *\n * ```\n *\n * @returns {Function}\n * @param response\n * @decorator\n * @operation\n * @response\n * @deprecated Use @Returns decorator from @tsed/schema\n */\nexport function ReturnType(response: Partial<IResponseOptions> = {}): Function {\n  return EndpointFn((endpoint) => {\n    const {responses, statusCode} = endpoint;\n    const code = response.code || statusCode; // implicit\n\n    if (isSuccessStatus(response.code)) {\n      const {response} = endpoint;\n      responses.delete(statusCode);\n      endpoint.statusCode = code;\n      endpoint.responses.set(code, response);\n    }\n\n    response = {\n      description: \"\",\n      ...deepMerge(endpoint.responses.get(code), cleanObject(response)),\n      code\n    };\n\n    endpoint.responses.set(response.code!, response as IResponseOptions);\n  });\n}\n\n/**\n * Add responses documentation for a specific status code.\n *\n * ::: warning\n * This decorator will be removed in v6 in favor of @@Returns@@ from @tsed/schema.\n * For v5 user, use @@Returns@@ decorator from @tsed/common then in v6 switch to @tsed/schema.\n * :::\n *\n * ## Examples\n * ## With status code\n *\n * ```typescript\n *  @Returns(404, {description: \"Not found\"})\n *  @Returns(200, {description: \"OK\", type: Model})\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"404\": {\n *       \"description\": \"Description\"\n *     },\n *     \"2OO\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"schemaOfModel\": \"...\"}\n *     }\n *   }\n * }\n * ```\n *\n * ### Without status code\n *\n * Returns can be use without status code. In this case, the response will be added to the default status code\n * (200 or the status code seated with `@Status`).\n *\n * ```typescript\n *  @Returns({description: \"Description\"})\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"200\": {\n *       \"description\": \"Description\"\n *     }\n *   }\n * }\n * ```\n *\n * ### With type schema\n *\n * Returns accept another signature with a type.\n *\n * ```typescript\n *  @Returns(Model, {description: \"Description\"}) //OR\n *  @Returns(Model)\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"200\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"schemaOfModel\": \"...\"}\n *     }\n *   }\n * }\n * ```\n * @param statusCode Code status\n * @param options Swagger responses documentations\n * @operation\n * @response\n * @decorator\n */\nexport function Returns(statusCode: number, options: Partial<IResponseOptions>): any;\nexport function Returns(statusCode: number, model: Type<any>): any;\nexport function Returns(options: Partial<IResponseOptions>): any;\nexport function Returns(model: Type<any>): any;\nexport function Returns(model: Type<any>, options: Partial<IResponseOptions>): any;\nexport function Returns(...args: any[]) {\n  return ReturnType(mapStatusResponseOptions(args));\n}\n\n/**\n * Add responses documentation for a specific status code.\n *\n * ::: warning\n * This decorator will be removed in v6 in favor of @@Returns@@ from @tsed/schema.\n * For v5 user, use @@ReturnsArray@@ decorator from @tsed/common then in v6 switch to `@Returns(Array).Of(User)` from @tsed/schema.\n * :::\n *\n * ## Examples\n * ## With status code\n *\n * ```typescript\n *  @ReturnsArray(200, {description: \"OK\", type: Model})\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"2OO\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"type\": \"array\"}\n *     }\n *   }\n * }\n * ```\n *\n * ### Without status code\n *\n * ReturnsArray can be use without status code. In this case, the response will be added to the default status code\n * (200 or the status code seated with `@Status`).\n *\n * ```typescript\n *  @ReturnsArray({description: \"Description\"})\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"200\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\"type\": \"array\"}\n *     }\n *   }\n * }\n * ```\n *\n * ### With type schema\n *\n * ReturnsArray accept another signature with a type.\n *\n * ```typescript\n *  @ReturnsArray(Model, {description: \"Description\"}) //OR\n *  @ReturnsArray(Model)\n *  async myMethod(): Promise<Model>  {\n *\n *  }\n * ```\n *\n * This example will produce this documentation in swagger:\n *\n * ```json\n * {\n *   \"responses\": {\n *     \"200\": {\n *       \"description\": \"Description\",\n *       \"schema\": {\n *         \"type\": \"array\",\n *         \"items\": {\n *           $ref: \"Model\"\n *         }\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param statusCode Code status\n * @param options Swagger responses documentations\n * @returns {Function}\n * @decorator\n * @swagger\n * @operation\n * @response\n */\nexport function ReturnsArray(statusCode: number, options: Partial<IResponseOptions>): any;\nexport function ReturnsArray(statusCode: number, model: Type<any>): any;\nexport function ReturnsArray(options: Partial<IResponseOptions>): any;\nexport function ReturnsArray(model: Type<any>): any;\nexport function ReturnsArray(model: Type<any>, options: Partial<IResponseOptions>): any;\nexport function ReturnsArray(...args: any[]) {\n  return ReturnType({...mapStatusResponseOptions(args), collectionType: Array});\n}\n"]}