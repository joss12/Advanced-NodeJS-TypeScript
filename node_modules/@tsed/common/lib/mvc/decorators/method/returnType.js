"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReturnsArray = exports.Returns = exports.ReturnType = void 0;
const core_1 = require("@tsed/core");
const endpointFn_1 = require("./endpointFn");
const isSuccessStatus = (code) => code && 200 <= code && code < 300;
/**
 * @ignore
 */
function mapStatusResponseOptions(args) {
    const configuration = {};
    args.forEach((value) => {
        configuration[typeof value] = value;
    });
    const { number: code, object: options = {}, function: type } = configuration;
    if (type) {
        options.type = type;
    }
    return {
        ...options,
        code,
        type: options.type || options.use,
        collectionType: options.collectionType || options.collection
    };
}
/**
 * Define the returned type for the serialization.
 *
 * ::: warning
 * This decorator will be removed in v6 in favor of @@Returns@@ from @tsed/schema.
 * For v5 user, use @@Returns@@ decorator from @tsed/common then in v6 switch to @tsed/schema.
 * :::
 *
 * ```typescript
 * @Controller('/')
 * export class Ctrl {
 *    @Get('/')
 *    @ReturnType({code: 200, type: User, collectionType: Map})
 *    get(): Promise<Map<User>> { }
 * }
 *
 * ```
 *
 * @returns {Function}
 * @param response
 * @decorator
 * @operation
 * @response
 * @deprecated Use @Returns decorator from @tsed/schema
 */
function ReturnType(response = {}) {
    return endpointFn_1.EndpointFn((endpoint) => {
        const { responses, statusCode } = endpoint;
        const code = response.code || statusCode; // implicit
        if (isSuccessStatus(response.code)) {
            const { response } = endpoint;
            responses.delete(statusCode);
            endpoint.statusCode = code;
            endpoint.responses.set(code, response);
        }
        response = {
            description: "",
            ...core_1.deepMerge(endpoint.responses.get(code), core_1.cleanObject(response)),
            code
        };
        endpoint.responses.set(response.code, response);
    });
}
exports.ReturnType = ReturnType;
function Returns(...args) {
    return ReturnType(mapStatusResponseOptions(args));
}
exports.Returns = Returns;
function ReturnsArray(...args) {
    return ReturnType({ ...mapStatusResponseOptions(args), collectionType: Array });
}
exports.ReturnsArray = ReturnsArray;
//# sourceMappingURL=returnType.js.map