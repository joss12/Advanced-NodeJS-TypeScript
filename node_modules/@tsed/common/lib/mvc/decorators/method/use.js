"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Use = void 0;
const core_1 = require("@tsed/core");
const index_1 = require("../../constants/index");
const EndpointMetadata_1 = require("../../models/EndpointMetadata");
function mapOptions(args) {
    let method = undefined;
    let path = undefined;
    const middlewares = args.filter((arg) => {
        if (typeof arg === "string" && index_1.HTTP_METHODS.includes(arg)) {
            method = arg;
            return false;
        }
        if (typeof arg === "string" || arg instanceof RegExp) {
            path = arg ? arg : "/";
            return false;
        }
        return !!arg;
    });
    return {
        path,
        method,
        middlewares
    };
}
/**
 * Mounts the specified middleware function or functions at the specified path: the middleware function is executed when
 * the base of the requested path matches `path.
 *
 * ```typescript
 * @Controller('/')
 * @Use(Middleware1)
 * export class Ctrl {
 *
 *    @Get('/')
 *    @Use(Middleware2)
 *    get() { }
 * }
 *
 * ```
 *
 * @returns {Function}
 * @param args
 * @decorator
 * @operation
 */
function Use(...args) {
    return (target, targetKey, descriptor) => {
        if (core_1.decoratorTypeOf([target, targetKey, descriptor]) === core_1.DecoratorTypes.METHOD) {
            const options = mapOptions(args);
            const endpoint = EndpointMetadata_1.EndpointMetadata.get(target, targetKey);
            options.path &&
                endpoint.pathsMethods.push({
                    method: options.method,
                    path: options.path
                });
            endpoint.use(args);
            return descriptor;
        }
        core_1.Store.from(target).merge("middlewares", {
            use: args
        });
    };
}
exports.Use = Use;
//# sourceMappingURL=use.js.map