{"version":3,"file":"contentType.js","sourceRoot":"","sources":["../../../../src/mvc/decorators/method/contentType.ts"],"names":[],"mappings":";;;AAAA,6CAAwC;AACxC,qCAAqD;AAErD;;;;;;;;;;;;;;;;;;GAkBG;AACH,SAAgB,WAAW,CAAC,IAAY;IACtC,OAAO,oBAAa,CAClB,iBAAU,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,EAC9B,uBAAU,CAAC,CAAC,QAAQ,EAAE,EAAE;QACtB,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;IAC9B,CAAC,CAAC,CACH,CAAC;AACJ,CAAC;AAPD,kCAOC","sourcesContent":["import {EndpointFn} from \"./endpointFn\";\nimport {StoreMerge, useDecorators} from \"@tsed/core\";\n\n/**\n * Sets the Content-Type HTTP header to the MIME type as determined by mime.lookup() for the specified type.\n * If type contains the “/” character, then it sets the `Content-Type` to type.\n *\n * ```typescript\n *  @ContentType('.html');              // => 'text/html'\n *  @ContentType('html');               // => 'text/html'\n *  @ContentType('json');               // => 'application/json'\n *  @ContentType('application/json');   // => 'application/json'\n *  @ContentType('png');                // => image/png\n *  private myMethod() {}\n * ```\n *\n * @param type\n * @decorator\n * @operation\n * @response\n * @headers\n */\nexport function ContentType(type: string) {\n  return useDecorators(\n    StoreMerge(\"produces\", [type]),\n    EndpointFn((endpoint) => {\n      endpoint.contentType = type;\n    })\n  );\n}\n"]}