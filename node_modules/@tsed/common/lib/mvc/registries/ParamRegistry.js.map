{"version":3,"file":"ParamRegistry.js","sourceRoot":"","sources":["../../../src/mvc/registries/ParamRegistry.ts"],"names":[],"mappings":";;;AAEA,2DAAuF;AAEvF,gEAA2D;AAC3D,sEAAiE;AACjE,4DAAuD;AAIvD;;GAEG;AACH,MAAa,aAAc,SAAQ,6BAAa;IAC9C;;;;OAIG;IACH,0BAA0B;IAC1B,MAAM,CAAC,SAAS,CAAC,MAAuC,EAAE,OAA0B;QAClF,MAAM,EAAC,UAAU,EAAE,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,aAAa,EAAC,GAAG,OAAO,CAAC;QAC/F,IAAI,EAAC,SAAS,EAAC,GAAG,OAAO,CAAC;QAE1B,MAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,MAAO,EAAE,WAAY,EAAE,KAAK,CAAC,CAAC;QAE9D,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;YAC9B,SAAS,GAAG,MAAoB,CAAC;SAClC;aAAM;YACL,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;SACvB;QAED,KAAK,CAAC,UAAU,GAAG,UAAW,CAAC;QAE/B,IAAI,SAAS,EAAE;YACb,KAAK,CAAC,SAAS,GAAG,SAAU,CAAC;SAC9B;QAED,IAAI,OAAO,EAAE;YACX,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;SACtB;QAED,KAAK,CAAC,KAAK,GAAG;YACZ,KAAK,CAAC,UAAU,IAAI,yCAAmB;YACvC,aAAa,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,cAAc,CAAC,IAAI,+BAAc;YACvE,YAAY,IAAI,mCAAgB;YAChC,GAAG,KAAK,CAAC,KAAK;SACf,CAAC,MAAM,CAAC,OAAO,CAAkB,CAAC;QAEnC,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAtCD,sCAsCC","sourcesContent":["import {Type} from \"@tsed/core\";\nimport {IParamOptions} from \"../interfaces/IParamOptions\";\nimport {IParamConstructorOptions, IPipe, ParamMetadata} from \"../models/ParamMetadata\";\nimport {ParamTypes} from \"../models/ParamTypes\";\nimport {DeserializerPipe} from \"../pipes/DeserializerPipe\";\nimport {ParseExpressionPipe} from \"../pipes/ParseExpressionPipe\";\nimport {ValidationPipe} from \"../pipes/ValidationPipe\";\n\nexport interface IUseFilterOptions extends IParamConstructorOptions, IParamOptions<any> {}\n\n/**\n * @deprecated Use ParamMetadata instead of\n */\nexport class ParamRegistry extends ParamMetadata {\n  /**\n   * @param filter\n   * @param options\n   * @deprecated\n   */\n  /* istanbul ignore next */\n  static useFilter(filter: string | Type<any> | ParamTypes, options: IUseFilterOptions): ParamMetadata {\n    const {expression, useType, propertyKey, index, target, useConverter, useValidation} = options;\n    let {paramType} = options;\n\n    const param = ParamRegistry.get(target!, propertyKey!, index);\n\n    if (typeof filter === \"string\") {\n      paramType = filter as ParamTypes;\n    } else {\n      param.filter = filter;\n    }\n\n    param.expression = expression!;\n\n    if (paramType) {\n      param.paramType = paramType!;\n    }\n\n    if (useType) {\n      param.type = useType;\n    }\n\n    param.pipes = [\n      param.expression && ParseExpressionPipe,\n      useValidation && (param.type || param.collectionType) && ValidationPipe,\n      useConverter && DeserializerPipe,\n      ...param.pipes\n    ].filter(Boolean) as Type<IPipe>[];\n\n    return param;\n  }\n}\n"]}