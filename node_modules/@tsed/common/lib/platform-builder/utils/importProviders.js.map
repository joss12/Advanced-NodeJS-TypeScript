{"version":3,"file":"importProviders.js","sourceRoot":"","sources":["../../../src/platform-builder/utils/importProviders.ts"],"names":[],"mappings":";;;AAAA,iCAA6F;AAE7F,yDAAoD;AAE7C,KAAK,UAAU,eAAe,CAAC,QAAyB;IAC7D,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAEzC,MAAM,SAAS,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAErD,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,EAAE,EAAE,CAAC,CAAC,EAAC,KAAK,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC;AACpG,CAAC;AAND,0CAMC;AAED,KAAK,UAAU,SAAS,CAAC,QAAa;IACpC,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAChC,mCAAgB,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC;QACpD,mCAAgB,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,OAAO,CAAC;QAClD,mCAAgB,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,OAAO,CAAC;KAC5D,CAAC,CAAC;IAEH,MAAM,SAAS,GAAsB,EAAU,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC;IAEnE,MAAM,QAAQ,GAAQ,SAAS;SAC5B,GAAG,CAAC,CAAC,EAAC,KAAK,EAAC,EAAE,EAAE,CAAC,oBAAe,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SAC5C,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,IAAI,MAAK,iBAAY,CAAC,MAAM,IAAI,QAAQ,CAAC,aAAa,CAAC;SACtF,GAAG,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,SAAS,CAAC,EAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,aAAa,EAAC,CAAC,CAAC,CAAC;IAElG,OAAQ,EAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;AACzE,CAAC","sourcesContent":["import {GlobalProviders, InjectorService, IProvider, Provider, ProviderType} from \"@tsed/di\";\nimport {IRoute} from \"../../platform/interfaces/IRoute\";\nimport {importComponents} from \"./importComponents\";\n\nexport async function importProviders(injector: InjectorService): Promise<IRoute[]> {\n  injector.logger.debug(\"Scan components\");\n\n  const providers = await importAll(injector.settings);\n\n  return providers.filter((provider) => !!provider.route).map(({route, token}) => ({route, token}));\n}\n\nasync function importAll(settings: any): Promise<IProvider<any>[]> {\n  const results = await Promise.all([\n    importComponents(settings.imports, settings.exclude),\n    importComponents(settings.mount, settings.exclude),\n    importComponents(settings.componentsScan, settings.exclude)\n  ]);\n\n  const providers: IProvider<any>[] = ([] as any).concat(...results);\n\n  const promises: any = providers\n    .map(({token}) => GlobalProviders.get(token))\n    .filter((provider) => provider?.type === ProviderType.MODULE && provider.configuration)\n    .map((provider: Provider) => importAll({exclude: settings.exclude, ...provider.configuration}));\n\n  return ([] as any).concat(...(await Promise.all(promises)), providers);\n}\n"]}