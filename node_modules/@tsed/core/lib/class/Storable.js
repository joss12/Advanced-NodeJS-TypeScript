"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storable = void 0;
const ObjectUtils_1 = require("../utils/ObjectUtils");
const Entity_1 = require("./Entity");
const Metadata_1 = require("./Metadata");
const Store_1 = require("./Store");
/**
 * @deprecated Will be removed in v6
 */
class Storable extends Entity_1.Entity {
    constructor(target, propertyKey, index) {
        super({
            target,
            propertyKey,
            index: (ObjectUtils_1.isNumber(index) ? index : undefined),
            descriptor: ObjectUtils_1.isObject(index) ? index : undefined
        });
        this._target = target;
        this.build(target);
        if (target) {
            this._store = Store_1.Store.from(target, propertyKey, index);
        }
    }
    /**
     * Class of the entity.
     * @returns {Type<any>}
     */
    get target() {
        return this._target ? ObjectUtils_1.classOf(this._target) : this._target;
    }
    /**
     *
     * @returns {Type<any>}
     */
    get type() {
        return this._type;
    }
    /**
     *
     * @param value
     */
    set type(value) {
        this._type = value || Object;
    }
    /**
     *
     * @returns {Store}
     */
    get store() {
        return this._store;
    }
    build(target) {
        if (target && this._target) {
            let type;
            if (typeof this.index === "number") {
                type = Metadata_1.Metadata.getParamTypes(this._target, this.propertyKey)[this.index];
            }
            else {
                type = Metadata_1.Metadata.getType(this._target, this.propertyKey);
            }
            if (ObjectUtils_1.isCollection(type)) {
                this.collectionType = type;
                this._type = Object;
            }
            else {
                this._type = type;
            }
            this.name = ObjectUtils_1.nameOf(this.propertyKey);
        }
    }
}
exports.Storable = Storable;
//# sourceMappingURL=Storable.js.map